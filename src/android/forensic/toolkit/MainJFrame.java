/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package android.forensic.toolkit;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonModel;
import javax.swing.filechooser.FileSystemView;
import javax.xml.bind.JAXBException;

/**
 *
 * @author Resley Rodrigues
 */

public class MainJFrame extends javax.swing.JFrame {
String jump_instruction = null, path=null;
    public void getDrives(javax.swing.JComboBox DriveSelector) {

        DriveSelector.removeAllItems();
        File[] roots = File.listRoots();
        for (int i = 0; i < roots.length; i++) {
            DriveSelector.addItem(roots[i]);
        }
        jTabbedPane1.setTitleAt(0, "Boot Sector");
        jTabbedPane1.setTitleAt(1, "FAT");
 //       jTabbedPane1.setTitleAt(2, "Boot Sector HEX View");
    }

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cloneDialog = new javax.swing.JDialog();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton5 = new javax.swing.JButton();
        hashDialog = new javax.swing.JDialog();
        MD5 = new javax.swing.JRadioButton();
        SHA1 = new javax.swing.JRadioButton();
        SHA512 = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        HashValue = new javax.swing.JTextField();
        ComputeHash = new javax.swing.JButton();
        RefreshDriveList1 = new javax.swing.JButton();
        HashAlgorithm = new javax.swing.ButtonGroup();
        DriveSelector = new javax.swing.JComboBox();
        lbl_SelectDrive = new javax.swing.JLabel();
        get_details = new javax.swing.JButton();
        VolumeLabel = new javax.swing.JLabel();
        FreeSpace = new javax.swing.JLabel();
        TotalSpace = new javax.swing.JLabel();
        DriveType = new javax.swing.JLabel();
        lbl_Label = new javax.swing.JLabel();
        lbl_FreeSpace = new javax.swing.JLabel();
        lbl_TotalSize = new javax.swing.JLabel();
        lbl_Type = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        RefreshDriveList = new javax.swing.JButton();
        lbl_Hash = new javax.swing.JLabel();
        Hash = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        BootSector = new javax.swing.JScrollPane();
        BootSectorData = new javax.swing.JTextArea();
        BootSectorHex = new javax.swing.JScrollPane();
        BootSectorHexData = new javax.swing.JTextArea();
        PartitionTable = new javax.swing.JScrollPane();
        PartitionTableData = new javax.swing.JTextArea();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        clone_disk = new javax.swing.JButton();
        hash_disk = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList();
        re_calc = new javax.swing.JButton();
        recoverFiles = new javax.swing.JButton();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "C:\\", "D:\\", "E:\\", "F:\\" }));

            jLabel1.setText("Disk to Clone:");

            jTextField2.setText("E:\\");

                jLabel2.setText("Save to: ");

                jButton4.setText("Browse");

                jProgressBar1.setValue(74);

                jButton5.setText("Cancel");
                jButton5.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton5ActionPerformed(evt);
                    }
                });

                javax.swing.GroupLayout cloneDialogLayout = new javax.swing.GroupLayout(cloneDialog.getContentPane());
                cloneDialog.getContentPane().setLayout(cloneDialogLayout);
                cloneDialogLayout.setHorizontalGroup(
                    cloneDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cloneDialogLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(cloneDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(cloneDialogLayout.createSequentialGroup()
                                .addGroup(cloneDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, cloneDialogLayout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField2))
                                    .addGroup(cloneDialogLayout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(51, 51, 51)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(cloneDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap(26, Short.MAX_VALUE))
                );
                cloneDialogLayout.setVerticalGroup(
                    cloneDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cloneDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(cloneDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jButton5))
                        .addGap(18, 18, 18)
                        .addGroup(cloneDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jButton4))
                        .addGap(18, 18, 18)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(22, Short.MAX_VALUE))
                );

                hashDialog.setTitle("Compute Hash - Android Forensic Toolkit");
                hashDialog.setBounds(new java.awt.Rectangle(0, 0, 400, 240));
                hashDialog.setPreferredSize(new java.awt.Dimension(400, 240));
                hashDialog.setResizable(false);

                MD5.setText("MD5");
                MD5.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        MD5ActionPerformed(evt);
                    }
                });

                SHA1.setText("SHA1");

                SHA512.setText("SHA512");

                jLabel3.setText("Choose Algorithm:");

                jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "C:\\", "D:\\", "E:\\", "F:\\" }));

                    jTextField3.setText("D:\\HashRecords\\DriveF.txt");

                    jLabel4.setText("Compare With:");

                    jLabel5.setText("Disk to Hash:");

                    jButton6.setText("Hide");
                    jButton6.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jButton6ActionPerformed(evt);
                        }
                    });

                    jButton7.setText("Browse");

                    jLabel6.setText("Hash Value:");

                    HashValue.setText("3DA3828BAC4918CAED8AA82F71");

                    ComputeHash.setText("Compute");
                    ComputeHash.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            ComputeHashActionPerformed(evt);
                        }
                    });

                    RefreshDriveList1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/android/forensic/toolkit/refresh.png"))); // NOI18N
                    RefreshDriveList1.setToolTipText("Refresh");
                    RefreshDriveList1.setBorder(null);
                    RefreshDriveList1.setBorderPainted(false);
                    RefreshDriveList1.setContentAreaFilled(false);
                    RefreshDriveList1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    RefreshDriveList1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            RefreshDriveList1ActionPerformed(evt);
                        }
                    });

                    javax.swing.GroupLayout hashDialogLayout = new javax.swing.GroupLayout(hashDialog.getContentPane());
                    hashDialog.getContentPane().setLayout(hashDialogLayout);
                    hashDialogLayout.setHorizontalGroup(
                        hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(hashDialogLayout.createSequentialGroup()
                            .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(hashDialogLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(hashDialogLayout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addGap(18, 18, 18)
                                            .addComponent(MD5)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(SHA1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(SHA512))
                                        .addGroup(hashDialogLayout.createSequentialGroup()
                                            .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, hashDialogLayout.createSequentialGroup()
                                                    .addComponent(jLabel5)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(RefreshDriveList1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, hashDialogLayout.createSequentialGroup()
                                                    .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel4)
                                                        .addComponent(jLabel6))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(HashValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(ComputeHash)
                                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGroup(hashDialogLayout.createSequentialGroup()
                                    .addGap(139, 139, 139)
                                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addContainerGap(52, Short.MAX_VALUE))
                    );
                    hashDialogLayout.setVerticalGroup(
                        hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(hashDialogLayout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(MD5)
                                .addComponent(SHA1)
                                .addComponent(SHA512)
                                .addComponent(jLabel3))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(ComputeHash))
                                .addComponent(RefreshDriveList1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(HashValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(11, 11, 11)
                            .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4)
                                .addComponent(jButton7))
                            .addGap(18, 18, 18)
                            .addComponent(jButton6)
                            .addContainerGap(60, Short.MAX_VALUE))
                    );

                    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                    setTitle("Android Forensic Toolkit");
                    setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

                    DriveSelector.setName(""); // NOI18N

                    lbl_SelectDrive.setText("Select Drive");

                    get_details.setText("Get Details");
                    get_details.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            get_detailsActionPerformed(evt);
                        }
                    });

                    VolumeLabel.setText("vol_lbl");
                    VolumeLabel.setToolTipText("");

                    FreeSpace.setText("free");

                    TotalSpace.setText("total");

                    DriveType.setText("jLabel6");

                    lbl_Label.setText("Label:");

                    lbl_FreeSpace.setText("Free Space:");

                    lbl_TotalSize.setText("Total Size:");

                    lbl_Type.setText("Type:");

                    jTextField1.setText("jTextField1");

                    RefreshDriveList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/android/forensic/toolkit/refresh.png"))); // NOI18N
                    RefreshDriveList.setToolTipText("Refresh");
                    RefreshDriveList.setBorder(null);
                    RefreshDriveList.setBorderPainted(false);
                    RefreshDriveList.setContentAreaFilled(false);
                    RefreshDriveList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    RefreshDriveList.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            RefreshDriveListActionPerformed(evt);
                        }
                    });

                    lbl_Hash.setText("Hash Values");

                    jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                    jTabbedPane1.setName(""); // NOI18N

                    BootSectorData.setColumns(20);
                    BootSectorData.setRows(5);
                    BootSector.setViewportView(BootSectorData);

                    jSplitPane1.setLeftComponent(BootSector);

                    BootSectorHexData.setColumns(20);
                    BootSectorHexData.setRows(5);
                    BootSectorHex.setViewportView(BootSectorHexData);

                    jSplitPane1.setRightComponent(BootSectorHex);

                    jTabbedPane1.addTab("BootSector", jSplitPane1);

                    PartitionTableData.setColumns(20);
                    PartitionTableData.setRows(5);
                    PartitionTable.setViewportView(PartitionTableData);

                    jTabbedPane1.addTab("FAT", PartitionTable);

                    jInternalFrame1.setVisible(true);

                    javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
                    jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
                    jInternalFrame1Layout.setHorizontalGroup(
                        jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 962, Short.MAX_VALUE)
                    );
                    jInternalFrame1Layout.setVerticalGroup(
                        jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 260, Short.MAX_VALUE)
                    );

                    jTabbedPane1.addTab("tab3", jInternalFrame1);

                    jList1.setModel(new javax.swing.AbstractListModel() {
                        String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
                        public int getSize() { return strings.length; }
                        public Object getElementAt(int i) { return strings[i]; }
                    });
                    jScrollPane1.setViewportView(jList1);

                    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                    jPanel1.setLayout(jPanel1Layout);
                    jPanel1Layout.setHorizontalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addContainerGap(377, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(357, 357, 357))
                    );
                    jPanel1Layout.setVerticalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap(149, Short.MAX_VALUE))
                    );

                    jTabbedPane1.addTab("tab4", jPanel1);

                    clone_disk.setText("Clone Disk");
                    clone_disk.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            clone_diskActionPerformed(evt);
                        }
                    });

                    hash_disk.setText("Compute Hash");
                    hash_disk.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            hash_diskActionPerformed(evt);
                        }
                    });

                    fileList.setModel(new javax.swing.AbstractListModel() {
                        String[] strings = { "Please select a drive from the dropdown box and click Get Details to list the files on that drive." };
                        public int getSize() { return strings.length; }
                        public Object getElementAt(int i) { return strings[i]; }
                    });
                    fileList.setEnabled(false);
                    jScrollPane2.setViewportView(fileList);

                    jScrollPane2.setBounds(0, 8, 978, 190);
                    jLayeredPane1.add(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

                    re_calc.setText("Recalculate");
                    re_calc.setToolTipText("Recalculate the list of files");
                    re_calc.setName(""); // NOI18N
                    re_calc.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            re_calcActionPerformed(evt);
                        }
                    });

                    recoverFiles.setText("Recover");
                    recoverFiles.setToolTipText("Recover the selected files.");
                    recoverFiles.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            recoverFilesActionPerformed(evt);
                        }
                    });

                    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                    getContentPane().setLayout(layout);
                    layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lbl_SelectDrive)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(DriveSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbl_Label)
                                        .addComponent(lbl_Type)
                                        .addComponent(lbl_FreeSpace)
                                        .addComponent(lbl_TotalSize))
                                    .addGap(9, 9, 9)
                                    .addComponent(RefreshDriveList, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(FreeSpace)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(VolumeLabel)
                                                .addComponent(DriveType)
                                                .addComponent(get_details)
                                                .addComponent(TotalSpace))
                                            .addGap(87, 87, 87)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(re_calc)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(recoverFiles))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(clone_disk)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(hash_disk))
                                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(lbl_Hash)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(Hash)))))))
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLayeredPane1)
                    );
                    layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(lbl_SelectDrive)
                            .addGap(1, 1, 1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(get_details)
                                    .addComponent(clone_disk)
                                    .addComponent(hash_disk))
                                .addComponent(RefreshDriveList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(DriveSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lbl_Label)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lbl_Type)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbl_FreeSpace)
                                        .addComponent(FreeSpace))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbl_TotalSize, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(TotalSpace)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(VolumeLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(DriveType)
                                    .addGap(26, 26, 26)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(re_calc)
                                        .addComponent(recoverFiles)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbl_Hash)
                                        .addComponent(Hash))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                    );

                    VolumeLabel.getAccessibleContext().setAccessibleName("VolumeLabel");
                    DriveType.getAccessibleContext().setAccessibleName("");

                    pack();
                }// </editor-fold>//GEN-END:initComponents

    private void get_detailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_detailsActionPerformed
        String freeSpace, totalSpace;
        path = DriveSelector.getSelectedItem().toString();
        File temp = new File(path);

        freeSpace = Utils.getSize(temp.getFreeSpace());
        totalSpace = Utils.getSize(temp.getTotalSpace());

        VolumeLabel.setText(FileSystemView.getFileSystemView().getSystemDisplayName(temp));
        DriveType.setText(FileSystemView.getFileSystemView().getSystemTypeDescription(temp));
        FreeSpace.setText(freeSpace);
//        TotalSpace.setText(totalSpace);

        File diskRoot = new File("\\\\.\\" + path);
        RandomAccessFile diskAccess;
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            diskAccess = new RandomAccessFile(diskRoot, "r");
            byte[] content = new byte[1024];
            diskAccess.readFully(content);
            md.update(content);
            Hash.setText(Utils.byteToHex(md.digest()));
            String temp_str = "";
            for (int i = 71; i <= 81; i++) {
                temp_str = temp_str.concat(String.valueOf(Utils.hexToText(Utils.hex(content[i]))));
            }
        //    VolumeLabel.setText(temp_str);

            BootSectorData.setText("");
            PartitionTableData.setText("");
            BootSectorHexData.setText("");
            BootSectorData.setTabSize(3);
            PartitionTableData.setTabSize(3);
            BootSectorHexData.setTabSize(3);
            jump_instruction = Utils.hex(content[0]) + Utils.hex(content[1]) + Utils.hex(content[2]);
            int txm;
            switch (jump_instruction) {
                case "EB5290":
                    {
                        NTFS disk = new NTFS();
                        jTabbedPane1.setTitleAt(1, "MFT");
                        disk.getBPB(path);
                        disk.printBPB(BootSectorData,BootSectorHexData);
                        disk.readMFT(PartitionTableData);
                        TotalSpace.setText(Utils.getSize(disk.bytes_per_Sector * disk.total_sectors));
                        break;
                    }
                case "EB5890":
                    {
                        FAT32 disk = new FAT32();
                        jTabbedPane1.setTitleAt(1, "FAT");
                        disk.getBPB(path);
                        disk.printBPB(BootSectorData,BootSectorHexData);
                        disk.readFAT(PartitionTableData, fileList, false);
                        VolumeLabel.setText(disk.label);
                        jTextField1.setText(disk.type);
                        if(disk.total_sectors==0)
                            TotalSpace.setText(Utils.getSize(disk.bytes_per_Sector*disk.total_sectorsL));
                        else
                            TotalSpace.setText(Utils.getSize(disk.bytes_per_Sector*disk.total_sectors));
                        break;
                    }
                default:
                    int sector_size = Utils.hexToInt(Utils.hex(content[11]), Utils.hex(content[12]));
                    int reserved_sectors = Utils.hexToInt(Utils.hex(content[14]), Utils.hex(content[15]));
                    int number_of_fat_sectors = Utils.hexToInt(Utils.hex(content[36]), Utils.hex(content[37]), Utils.hex(content[38]), Utils.hex(content[39]));
                    BootSectorData.append("OEM = ");
                    for (int i = 3; i <= 10; i++) {
                        BootSectorData.append(String.valueOf(Utils.hexToText(Utils.hex(content[i]))));
                    }
                    BootSectorData.append("\nFilesystem Type = ");
                    for (int i = 82; i <= 89; i++) {
                        BootSectorData.append(String.valueOf(Utils.hexToText(Utils.hex(content[i]))));
                    }
                    BootSectorData.append("\nNumber of bytes per sector = " + sector_size + "\n");
                    BootSectorData.append("Number of sectors per cluster = " + Utils.hexToInt(Utils.hex(content[13]), "00") + "\n");
                    BootSectorData.append("Number of reserved sectors = " + reserved_sectors + "\n");
                    BootSectorData.append("Number of sectors in filesystem = " + Utils.hexToInt(Utils.hex(content[19]), Utils.hex(content[20])) + "\n");
                    BootSectorData.append("Number of sectors per FAT = " + number_of_fat_sectors + "\n");
                    BootSectorData.append("\t\t 0\t 1\t 2\t 3\t 4\t 5\t 6\t 7\t\t 8\t 9\t A\t B\t C\t D\t E\t F");
                    PartitionTableData.append("\t\t 0\t 1\t 2\t 3\t 4\t 5\t 6\t 7\t\t 8\t 9\t A\t B\t C\t D\t E\t F");
                    int address = 0x000000;
                    for (int i = 0; i < sector_size; i++) {
                        txm = content[i];
                        if (i % 16 == 0) {
                            BootSectorData.append(String.format("\n%07X0\t", address++));
                        } else if (i % 8 == 0) {
                            BootSectorData.append("\t");
                        }
                        BootSectorData.append(Utils.hex(txm) + "\t");
                    }
                    //   System.out.println("Disk size = "+ getSize(diskAccess.length()));
                    System.out.println("File pointer at " + diskAccess.getFilePointer());
                    diskAccess.seek(reserved_sectors * sector_size);
                    System.out.println("File pointer at " + diskAccess.getFilePointer());
                    content = new byte[sector_size * number_of_fat_sectors];
                    System.out.println("index=" + reserved_sectors * sector_size);
                    System.out.println("len = " + sector_size * 2);
                    diskAccess.read(content, 0, sector_size * number_of_fat_sectors);
                    System.out.println("works");
                    //        address = Integer.valueOf(Integer.toHexString(reserved_sectors*sector_size), 16);
                    address = Integer.parseInt(Integer.toHexString(reserved_sectors * sector_size), 16);
                    System.out.println("Address = " + address);
                    for (int i = 0; i < 1921024; i++) {
                        txm = content[i];
                        if (i % 16 == 0) {
                            PartitionTableData.append(String.format("\n%08X\t", address));
                            System.out.println(String.format("@ %08X",address));
                            address += 16;
                        } else if (i % 8 == 0) {
                            PartitionTableData.append("\t");
                        }
                        PartitionTableData.append(Utils.hex(txm) + "\t");

                    }
                    diskAccess.seek(4308992);  //root directory for my pendrive
                    content = new byte[16384];
                    System.out.println("@" + diskAccess.getFilePointer());
                    diskAccess.readFully(content);
                    for (int i = 0; i < 512; i++) {

                        for (int j = (i * 32); j <= (i * 32) + 10; j++) {
                            System.out.print(Utils.hexToText(Utils.hex(content[j])));
                        }
                        System.out.print("    ");
                        System.out.print((Utils.hex(content[(i * 32) + 11])));
                        System.out.print("    ");
                        int temp_int = 0;
                        for (int j = (i * 32) + 27; j < (i * 32) + 32; j++) {
                            temp_int += Utils.hexToInt(Utils.hex(content[j]), "00");
                        }
                        System.out.print(Utils.getSize(temp_int));
                        System.out.println();
                    }
                    break;
            }
recoverFiles.setVisible(true);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | NoSuchAlgorithmException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_get_detailsActionPerformed

    private void RefreshDriveListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshDriveListActionPerformed
        this.getDrives(DriveSelector);
    }//GEN-LAST:event_RefreshDriveListActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void clone_diskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clone_diskActionPerformed
        cloneDialog.setVisible(true);
    }//GEN-LAST:event_clone_diskActionPerformed

    private void hash_diskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hash_diskActionPerformed
        this.getDrives(jComboBox2);
        hashDialog.setVisible(true);
        MD5.setActionCommand("MD5");
        SHA1.setActionCommand("SHA1");
        SHA512.setActionCommand("SHA512");
        HashAlgorithm.add(MD5);
        HashAlgorithm.add(SHA1);
        HashAlgorithm.add(SHA512);
    }//GEN-LAST:event_hash_diskActionPerformed

    private void re_calcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_re_calcActionPerformed
        try {
            switch (jump_instruction) {
                case "EB5290":
                    {
                        NTFS disk = new NTFS();
                        jTabbedPane1.setTitleAt(1, "MFT");
                        disk.getBPB(path);
                        disk.printBPB(BootSectorData,BootSectorHexData);
                        disk.readMFT(PartitionTableData);
                        TotalSpace.setText(Utils.getSize(disk.bytes_per_Sector * disk.total_sectors));
                        break;
                    }
                case "EB5890":
                    {
                        FAT32 disk = new FAT32();
                        jTabbedPane1.setTitleAt(1, "FAT");
                        disk.getBPB(path);
                        disk.printBPB(BootSectorData,BootSectorHexData);
                        disk.readFAT(PartitionTableData, fileList, true);
                        VolumeLabel.setText(disk.label);
                        jTextField1.setText(disk.type);
                        if(disk.total_sectors==0)
                            TotalSpace.setText(Utils.getSize(disk.bytes_per_Sector*disk.total_sectorsL));
                        else
                            TotalSpace.setText(Utils.getSize(disk.bytes_per_Sector*disk.total_sectors));
                        break;
                    }
                default:
                    break;
        }
            re_calc.setVisible(false);
            recoverFiles.setVisible(true);
        } catch (IOException | JAXBException ex) {
                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_re_calcActionPerformed

    private void recoverFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recoverFilesActionPerformed
        try {
            switch (jump_instruction) {
                case "EB5290":
                    {//NTFS
                        break;
                    }
                case "EB5890":
                    {
                        
                        FAT32 disk = new FAT32();
                        disk.recoverFiles(fileList, path);
//                        disk.recoverFiles(jList1);
                    }
                default:
                    break;
        }
            
        } catch (Exception ex) {
                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

    }//GEN-LAST:event_recoverFilesActionPerformed

    private void ComputeHashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComputeHashActionPerformed
        try {
            File spath = new File(jComboBox2.getSelectedItem().toString());
            long diskSize = spath.getTotalSpace();
            System.out.println("Disk size: " + diskSize + " or " + Utils.getSize(diskSize));
            System.out.println("Disk : "+spath.getAbsolutePath() + " or " + spath.getCanonicalPath());
            MessageDigest m = null;
            byte[] content = new byte[5242880];
            ButtonModel algorithm = HashAlgorithm.getSelection();
            String algo = algorithm.getActionCommand();
            try {
                switch(algorithm.getActionCommand()){
                    default: System.out.println(algorithm.getActionCommand());
                }
                m = MessageDigest.getInstance(algo);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            File sxpath = new File("\\\\.\\" + jComboBox2.getSelectedItem().toString());
            
                RandomAccessFile diskAccess1 = new RandomAccessFile(sxpath, "r");
            
            m.reset();
            StringBuilder hashString = new StringBuilder();
            int stop = (int) (diskSize/5242880);
            int extra = (int) (diskSize%5242880);
            for(int i=0;i<=stop;i++)
            {
                System.out.println(i);
                diskAccess1.readFully(content);
            
                m.update(content);
                byte[] digest = m.digest(content);
                BigInteger bigInt = new BigInteger(1,digest);
                hashString = hashString.append(bigInt.toString(16));
//                System.out.println(hashString);
            }
            content = new byte[extra];
            m.update(content);
                byte[] digest = m.digest(content);
                BigInteger bigInt = new BigInteger(1,digest);
                hashString = hashString.append(bigInt.toString(16));
                
                
            m.update(String.valueOf(hashString).getBytes());
            digest = m.digest(String.valueOf(hashString).getBytes());
            bigInt = new BigInteger(1,digest);
                HashValue.setText(bigInt.toString(16));
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ComputeHashActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        hashDialog.setVisible(false);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void MD5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MD5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MD5ActionPerformed

    private void RefreshDriveList1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshDriveList1ActionPerformed
       this.getDrives(jComboBox2);
    }//GEN-LAST:event_RefreshDriveList1ActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainJFrame a = new MainJFrame();
                a.setVisible(true);
                re_calc.setVisible(false);
                recoverFiles.setVisible(false);
                a.getDrives(a.DriveSelector);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane BootSector;
    private javax.swing.JTextArea BootSectorData;
    private javax.swing.JScrollPane BootSectorHex;
    private javax.swing.JTextArea BootSectorHexData;
    private javax.swing.JButton ComputeHash;
    private javax.swing.JComboBox DriveSelector;
    private javax.swing.JLabel DriveType;
    private javax.swing.JLabel FreeSpace;
    private javax.swing.JLabel Hash;
    private javax.swing.ButtonGroup HashAlgorithm;
    private javax.swing.JTextField HashValue;
    private javax.swing.JRadioButton MD5;
    private javax.swing.JScrollPane PartitionTable;
    private javax.swing.JTextArea PartitionTableData;
    private javax.swing.JButton RefreshDriveList;
    private javax.swing.JButton RefreshDriveList1;
    private javax.swing.JRadioButton SHA1;
    private javax.swing.JRadioButton SHA512;
    private javax.swing.JLabel TotalSpace;
    private javax.swing.JLabel VolumeLabel;
    private javax.swing.JDialog cloneDialog;
    private javax.swing.JButton clone_disk;
    private javax.swing.JList fileList;
    private javax.swing.JButton get_details;
    private javax.swing.JDialog hashDialog;
    private javax.swing.JButton hash_disk;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JLabel lbl_FreeSpace;
    private javax.swing.JLabel lbl_Hash;
    private javax.swing.JLabel lbl_Label;
    private javax.swing.JLabel lbl_SelectDrive;
    private javax.swing.JLabel lbl_TotalSize;
    private javax.swing.JLabel lbl_Type;
    public static javax.swing.JButton re_calc;
    public static javax.swing.JButton recoverFiles;
    // End of variables declaration//GEN-END:variables
}
